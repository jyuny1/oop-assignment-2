#BlueJ class context
comment0.target=Lexicon()
comment0.text=\nCreate\ a\ new\ lexicon\n\n
comment1.params=word
comment1.target=boolean\ wordExists(String)
comment1.text=\nThis\ method\ returns\ true\ if\ the\ parameters\ exists\ in\ the\ list\ of\nwords,\ false\ otherwise.\n@param\ word\ \ word\ to\ look\ for\ in\ the\ wordList\ ArrayList\n@return\ true\ if\ the\ word\ already\ exists,\ false\ otherwise\n\n
comment2.params=from\ to
comment2.target=WordDistance\ getEditDistance(String,\ String)
comment2.text=\nThis\ method\ computes\ the\ Levenshtein\ distance\n@param\ from\ \ first\ of\ the\ two\ strings\ to\ be\ compared\n@param\ to\ \ second\ string\ to\ be\ compared\n@return\ the\ "distance"\ between\ the\ two\ parameters\n\n
comment3.params=word
comment3.target=ArrayList<WordDistance>\ getEditDistances(String)
comment3.text=\nThis\ method\ \ returns\ an\ ArrayList\ of\ WordDistance\ objects,\ one\ for\neach\ of\ the\ words\ in\ the\ WordsList\ field\ of\ the\ Lexicon\ class\n@param\ word\ \ word\ to\ be\ compared\ to\ the\ lexicon\ items\n@return\ the\ "distances"\ between\ the\ parameter\ and\ all\ the\ words\nin\ the\ lexicon\n\n
comment4.params=wordDistances
comment4.target=WordDistance\ getMinDistance(ArrayList<WordDistance>)
comment4.text=\nThis\ method\ \ receives\ an\ ArrayList\ of\ WordDistance\ objects\ as\nparameter\ and\ returns\ the\ WordDistance\ object\ with\ the\ minimum\ \nedit\ distance.\ If\ there\ are\ several\ matches,\ it\ returns\ the\ one\nwith\ the\ lowest\ index\n@param\ wordDistances\ \ ArrayList\ of\ WordDistance\ to\ be\ inspected\n@return\ the\ minimum\ distance\ in\ the\ parameter\n\n
comment5.params=word\ n
comment5.target=ArrayList<String>\ getSimilarWords(String,\ int)
comment5.text=\nThis\ method\ retrieves\ words\ from\ the\ wordList\ which\ are\ similar\nto\ the\ one\ specified\ as\ first\ parameter\n@param\ word\ \ the\ word\ taken\ as\ a\ base\ in\ the\ search\ for\ \nalternatives\n@param\ n\ \ the\ number\ of\ alternatives\ to\ be\ retrieved\n@return\ an\ ArrayList\ containing\ the\ alternative\ words\n\n
comment6.params=word
comment6.target=boolean\ addWord(String)
comment6.text=\nThis\ method\ adds\ a\ new\ word\ to\ the\ wordList\ field\n@param\ word\ \ the\ new\ term\ to\ be\ added\n@return\ true\ if\ the\ word\ didn't\ exist\ and\ could\ be\ added,\nfalse\ otherwise\n\n
comment7.params=a\ b\ c
comment7.target=int\ Minimum(int,\ int,\ int)
comment7.text=\nThis\ method\ returns\ the\ minimum\ of\ three\ values\n@param\ a\ \ one\ of\ the\ three\ numbers\ to\ be\ compared\n@param\ b\ \ one\ of\ the\ three\ numbers\ to\ be\ compared\n@param\ c\ \ one\ of\ the\ three\ numbers\ to\ be\ compared\n@return\ the\ minimum\ value\ of\ the\ three\ parameters\n\n
comment8.params=s\ t
comment8.target=int\ editDistance(String,\ String)
comment8.text=\nThis\ method\ computes\ the\ Levenshtein\ distance.\ The\ Levenshtein\ \ndistance\ is\ the\ amount\ of\ difference\ between\ two\ strings\ and\ is\ \ngiven\ by\ the\ minimum\ number\ of\ operations\ needed\ to\ transform\ one\ \nstring\ into\ the\ other,\ where\ an\ operation\ is\ an\ insertion,\ \ndeletion,\ or\ substitution\ of\ a\ single\ character.\ This\ method\ should\nbe\ used\ to\ compare\ words,\ not\ phrases.\ If\ any\ of\ the\ arguments\ is\na\ phrase\ an\ exception\ is\ thrown.\n@param\ s\ \ one\ of\ the\ two\ strings\ to\ be\ compared\n@param\ t\ \ one\ of\ the\ two\ strings\ to\ be\ compared\n@return\ an\ integer\ representing\ the\ distance\ between\ the\ two\ \nparameters\n\n
numComments=9
