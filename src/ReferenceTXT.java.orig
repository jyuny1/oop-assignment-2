import  java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;


/**
 * This class implements a reference book or a group of
 * reference resources such as glossaries, dictionaries
 * thesauri, etc.
 * 
 * @author Pablo Romero
 * @version 2009.06.04
 */

public class ReferenceTXT
{   
    private static final String MOVIE_GLOSSARY = "Movie Glossary";
    private static final String TV_SERIES_GLOSSARY = "TV Series Glossary";
    
    // There are several glossaries
    private HashMap<String,Glossary> glossaries;
    
    /**
     * Constructor for objects of class Reference
     */
    public ReferenceTXT()
    {
        glossaries = new HashMap<String,Glossary>();
        includeAllGlossaries();
    }

    /**
     * Includes all the glossaries in the reference
     */
    private void includeAllGlossaries() 
    {
        glossaries.put(MOVIE_GLOSSARY, new MovieGlossary());
        glossaries.put(TV_SERIES_GLOSSARY, new TVSeriesGlossary());
    }

    /**
     * This method returns true if the parameter exists in the
     * glossaries, false otherwise.
     * @param label  label to look for in the glossaries
     */
    private boolean termExists(String label) 
    {
        boolean found = false;
        Iterator<Glossary> glossariesIterator = glossaries.values().iterator();
        while (!found && glossariesIterator.hasNext()) {
            if (glossariesIterator.next().termExists(label))
                found = true;
        }
        return found;
    }
      
    /*
     * This method handles the action if the inputed label does not exist.
     * @param label a string name which you are looking for definition.
     */
     private void termNotExists (String label) {
    	 Iterator<String> keyIterator = glossaries.keySet().iterator();
    	 
    	 while(keyIterator.hasNext()){
             String glossaryKey = keyIterator.next();
             Glossary glossary = glossaries.get(glossaryKey);
             
             ArrayList<String> suggestedTerms = glossary.getSimilarTerms(label);
             Iterator<String> suggestedTerm = suggestedTerms.iterator();
             
             if(suggestedTerm.hasNext()){
            	 System.out.println("what did you mean?");
            	 
            	 for(int i=1;suggestedTerm.hasNext();i++){
            		 System.out.println(i+". "+suggestedTerm.next());
            	 }
             }
             else{
            	 System.out.println(label+": cannot be recognised in "+glossaryKey+", please be more specific");
             }
    	 }    
    }

    /**
     * This method returns the definition of a term. If the term exists
     * in several glossaries all the definitions are returned
     * @param label  word to look for in the termsList field
     */
    private String getTermDefinition (String label) 
    {
        String definition = null;
        Iterator<String> keysIterator = glossaries.keySet().iterator();
        while (keysIterator.hasNext()) {
            String glossaryKey = keysIterator.next();
            Glossary glossary = glossaries.get(glossaryKey);
            if (glossary.termExists(label)) {
                definition += glossaryKey+"\n"+glossary.getTermDefinition(label)+"\n";
            }
        }        
        return definition;
    }
    
    /*
     * this method shows all definition stored in the golssaries
     */
    private void showTermList(){
    	Iterator<String> keyIterator = glossaries.keySet().iterator();
    	int i=0;
    	
    	while(keyIterator.hasNext()){
            String glossaryKey = keyIterator.next();
            Glossary glossary = glossaries.get(glossaryKey);
            ArrayList<Term> termList = glossary.getTermList();
            
            Iterator<Term> iterator = termList.iterator();
            while(iterator.hasNext()){
            	Term currentTerm = iterator.next();
            	System.out.println(i+1+". "+currentTerm.getLabel()+":"+currentTerm.getDefinition()+"\n");
            	i++;
            }
    	}
    }
    /**
     * This method interacts with the user. It asks the user for terms
     * to search. This interaction finishes when the user types the special
     * term "finish"
     */
     public void interact() 
     {
         while(true){
    		 System.out.print("Enter term: ");
             String term = EasyIn.getString().toLowerCase();
             
             if(term.equals("finish")){
            	break; 
             }
             else if (term.equals("help")){
            	 System.out.println("showall: show all terms in glossaries");
             }
             else if(term.equals("showall")){
            	 showTermList();
             }
             else if (termExists(term)){
            	 System.out.println(getTermDefinition(term));
             }
             else {
            	 //term not exist
            	 termNotExists(term);
             }
       
         }
	}
}